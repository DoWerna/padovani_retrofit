component gearchange32 """Calculate the correct motor speed setpoint for a 
machine with multiple gear ratios.""";

pin in float speed-in "Speed command input.";
pin out float speed-out "Speed command to DAC/PWM";
pin in bit gear-#-sel [32 : personality+1] """Gear selection by bit. Higher
numbers take priority if more than one is set""";
pin in bit sel "Alias for sel2 for compatibility with the previous version ";
pin in bit dir_in "Direction input for absolute speed + dir modes";
pin out bit dir-out "Direction output (will be reversed for negative scales)";
pin out bit min-lim "Indicates that the minimum limitation is active";
pin out bit max-lim "Indicates that the maximum limitation is active";
pin in unsigned gear-number "Gear selection as a numeric";
pin out float speed-filtered "Speed command to display, limited and absolute";
pin out float accel-limit "Acceleration limit for the selected gear";
param rw float min#[32: personality+1] = 0 "Minimum allowed speed in gear range N";
param rw float max#[32 : personality+1] = 100000 "Maximum allowed speed in gear range N";
param rw float acc#[32 : personality+1] = 0 "Maximum Acceleration in rpm/s. 0 = no limit";
param rw float scale#[32 : personality+1] = 1.0 "Ratio in gear range 1";
param rw bit reverse "negates the value of scale2, for compatibility";

option extra_setup;
variable float old_speed = 0;

description """The output will be a  value scaled for the selected gear, and 
clamped to the min/max values for that gear.

This should work for up to 32 gears.
To load two instances, one with 5 gears and one with 6 use:
loadrt gearchange32 count=2 personality=5,6
For a single instance you can omit the count, eg with 11 gears you can use:
loadrt gearchange32 personality=11

It accepts negative speeds, negative outputs and negative scales to allow for 
gear ranges that reverse the motion.

The scale is the ratio between input speed and output speed, so the same VFD 
scale parameter will work for any gear. If gear 1 is the slowest gear then other
ratios will probably need to be fractional. If the highest numbered gear is the
slowest then the scales will probably need to be greater than one. 

The gear can be input either as a numeric value (possibly assembled from 
\\fBweighted_sum\\fR components to convert the positions of several levers into a 
gear) or as an individual select bit for each gear. """;

function _;
license "GPL";
;;
#include <rtapi_math.h>
FUNCTION(_) {
    int gear;
    double speed_target;
    double delta;
    
    if (sel) gear = 2; // Backwards compatibility
    else if (gear_number) gear = gear_number;
    else for (gear = personality ; gear > 0 && !gear_sel(gear) ; gear--) {}
    
    speed_filtered = fabs(speed_in);
    if (speed_filtered > max(gear)) {
        max_lim = 1; min_lim = 0;
        speed_filtered = max(gear);}
    else if (speed_filtered < min(gear)) {
        min_lim = 1; max_lim = 0;
        speed_filtered = min(gear);}
    else { min_lim = 0; max_lim = 0; }
    
    speed_target =  speed_filtered * ((scale(gear) != 0)? scale(gear) : 1)
    *((speed_in < 0)? -1 : 1) ;
    delta = acc(gear) * fperiod * ((speed_target > old_speed)? 1 : -1);
    speed_out = ((acc(gear) != 0 && fabs(speed_target - old_speed) > fabs(delta))?
                 (old_speed += delta) : (old_speed = speed_target));
    
    dir_out = ((scale(gear) < 0)? !dir_in : dir_in);
    dir_out = ((reverse && gear == 2)? !dir_out : dir_out); // Backwards compatibility
    accel_limit = acc(gear);
}

EXTRA_SETUP( ) {
    if (personality == 0) personality = 2;
    return 0;
}

